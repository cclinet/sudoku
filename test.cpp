#include "board.h"
#include <gtest/gtest.h>

TEST(SolveTest, BasicAssertions) {
    auto solver = sudoku::Solver();
//    solver.set_board({6, 0, 0, 3, 0, 9, 0, 0, 0,
//                      4, 1, 3, 8, 2, 7, 6, 0, 5,
//                      9, 0, 0, 6, 0, 1, 0, 0, 0,
//                      1, 5, 6, 4, 0, 2, 9, 8, 3,
//                      8, 0, 7, 5, 1, 3, 2, 6, 4,
//                      2, 3, 4, 9, 6, 8, 5, 7, 1,
//                      5, 8, 1, 7, 3, 6, 4, 2, 9,
//                      3, 6, 2, 1, 9, 4, 0, 5, 0,
//                      7, 4, 9, 2, 8, 5, 0, 0, 6});
//    solver.solve();
    std::array<uint8_t, sudoku::N> result{
            6, 2, 5, 3, 4, 9, 7, 1, 8,
            4, 1, 3, 8, 2, 7, 6, 9, 5,
            9, 7, 8, 6, 5, 1, 3, 4, 2,
            1, 5, 6, 4, 7, 2, 9, 8, 3,
            8, 9, 7, 5, 1, 3, 2, 6, 4,
            2, 3, 4, 9, 6, 8, 5, 7, 1,
            5, 8, 1, 7, 3, 6, 4, 2, 9,
            3, 6, 2, 1, 9, 4, 8, 5, 7,
            7, 4, 9, 2, 8, 5, 1, 3, 6
    };
//    EXPECT_EQ(solver.get_board(), result);


    solver.set_board({9, 8, 0, 0, 0, 0, 0, 0, 0,
                      3, 4, 0, 0, 0, 0, 0, 9, 0,
                      7, 5, 1, 6, 0, 0, 4, 0, 0,
                      0, 0, 3, 0, 0, 0, 0, 0, 0,
                      0, 0, 4, 0, 0, 0, 0, 7, 0,
                      0, 0, 0, 0, 2, 0, 0, 0, 4,
                      0, 0, 0, 0, 0, 7, 3, 0, 0,
                      4, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0});
    solver.solve();
//    std::array<uint8_t, sudoku::N> result{
//            6, 2, 5, 3, 4, 9, 7, 1, 8,
//            4, 1, 3, 8, 2, 7, 6, 9, 5,
//            9, 7, 8, 6, 5, 1, 3, 4, 2,
//            1, 5, 6, 4, 7, 2, 9, 8, 3,
//            8, 9, 7, 5, 1, 3, 2, 6, 4,
//            2, 3, 4, 9, 6, 8, 5, 7, 1,
//            5, 8, 1, 7, 3, 6, 4, 2, 9,
//            3, 6, 2, 1, 9, 4, 8, 5, 7,
//            7, 4, 9, 2, 8, 5, 1, 3, 6
//    };
    EXPECT_EQ(solver.get_board(), result);
}